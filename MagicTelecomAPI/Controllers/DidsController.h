//
//  DidsController.h
//  MagicTelecomAPI
//
//  This file was automatically generated by APIMATIC v2.0 on 06/23/2016
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"

@interface DidsController : BaseController

/**
* Completion block definition for asynchronous call to Countries */
typedef void (^CompletedGetCountries)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Allow clients to get the list of available countries
* @param    page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
* @param    limit    Optional parameter: Maximum number of results to return in the response
*/
- (void) getCountriesAsyncWithPage:(NSNumber*) page
                limit:(NSNumber*) limit
                completionBlock:(CompletedGetCountries) onCompleted;

/**
* Completion block definition for asynchronous call to Country By Iso2 */
typedef void (^CompletedGetCountryByIso2)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Allow clients to get a specific country
* @param    countryIso2    Required parameter: Country ISO2
*/
- (void) getCountryByIso2AsyncWithCountryIso2:(NSString*) countryIso2
                completionBlock:(CompletedGetCountryByIso2) onCompleted;

/**
* Completion block definition for asynchronous call to Regions */
typedef void (^CompletedGetRegions)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Allow clients to get the list of available regions per country
* @param    countryIso2    Required parameter: Country ISO2
* @param    page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
* @param    limit    Optional parameter: Maximum number of results to return in the response
*/
- (void) getRegionsAsyncWithCountryIso2:(NSString*) countryIso2
                page:(NSNumber*) page
                limit:(NSNumber*) limit
                completionBlock:(CompletedGetRegions) onCompleted;

/**
* Completion block definition for asynchronous call to Regions By Handle */
typedef void (^CompletedGetRegionsByHandle)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Allow clients to get a specific region for a specific country
* @param    countryIso2    Required parameter: Country ISO2
* @param    regionHandle    Required parameter: Region handle
*/
- (void) getRegionsByHandleAsyncWithCountryIso2:(NSString*) countryIso2
                regionHandle:(NSString*) regionHandle
                completionBlock:(CompletedGetRegionsByHandle) onCompleted;

@end