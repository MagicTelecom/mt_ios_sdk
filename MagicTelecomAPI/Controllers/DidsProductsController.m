//
//  DidsProductsController.m
//  MagicTelecomAPI
//
//  This file was automatically generated by APIMATIC v2.0 on 06/23/2016
//
#import "DidsProductsController.h"

@implementation DidsProductsController

/**
* Allow clients to get the list of available phone_numbers
* @param    page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
* @param    limit    Optional parameter: Maximum number of results to return in the response
* @param    filter    Optional parameter: Allowed fields: country_iso2, region_handle, location_handle, location_name, phone_number, phone_number_type, zip_code
* @return	Returns the void response from the API call */
- (void) getDidsAsyncWithPage:(NSNumber*) page
                limit:(NSNumber*) limit
                filter:(NSString*) filter
                completionBlock:(CompletedGetDids) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) [Configuration BaseUri]];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/dids/products/dids"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withQueryParameters: @{
                    @"page": (nil != page) ? page : @1,
                    @"limit": (nil != limit) ? limit : @10,
                    @"filter": (nil != filter) ? filter : [NSNull null]
                }];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"accept": @"application/json",
        @"X-Auth-Token": [Configuration XAuthToken]
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    HttpRequest* request = [[self clientInstance] get: ^(HttpRequest* request) 
    { 
        [request setQueryUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: request
     success: ^(id context, HttpResponse *response) {
         //Error handling using HTTP status codes
         NSError* statusError = nil;

         //Error handling using HTTP status codes 
         if (response.statusCode == 401)
             statusError = [[APIError alloc] initWithReason: @"You are not authenticated"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 403)
             statusError = [[APIError alloc] initWithReason: @"This action needs a valid WSSE header"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 404)
             statusError = [[APIError alloc] initWithReason: @"Resource not found"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 400)
             statusError = [[APIError alloc] initWithReason: @"Http bad request"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if((response.statusCode < 200) || (response.statusCode > 206)) //[200,206] = HTTP OK
             statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         if(statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, context, nil, statusError);
         }
         else
         {
             //return response to API caller
             NSString* strResult = [(HttpStringResponse*)response body];
             id result = [NSJSONSerialization
                        JSONObjectWithData: [strResult dataUsingEncoding: NSUTF8StringEncoding]
                                   options: NSJSONReadingAllowFragments
                                     error: nil];

 
             //announce completion with success
             onCompleted(YES, context, result, nil);
         }
     } failure:^(id context, NSError *error) {
 
         //announce completion with failure
         onCompleted(NO, context, nil, error);
     }];
}

/**
* Allow clients to get a specific phone_number
* @param    phoneNumber    Required parameter: Phone Number
* @return	Returns the void response from the API call */
- (void) getDidsByPhoneNumberAsyncWithPhoneNumber:(NSString*) phoneNumber
                completionBlock:(CompletedGetDidsByPhoneNumber) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) [Configuration BaseUri]];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/dids/products/dids/{phone_number}"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withTemplateParameters: @{
                    @"phone_number": phoneNumber
                }];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"accept": @"application/json",
        @"X-Auth-Token": [Configuration XAuthToken]
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    HttpRequest* request = [[self clientInstance] get: ^(HttpRequest* request) 
    { 
        [request setQueryUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: request
     success: ^(id context, HttpResponse *response) {
         //Error handling using HTTP status codes
         NSError* statusError = nil;

         //Error handling using HTTP status codes 
         if (response.statusCode == 401)
             statusError = [[APIError alloc] initWithReason: @"You are not authenticated"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 403)
             statusError = [[APIError alloc] initWithReason: @"This action needs a valid WSSE header"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 404)
             statusError = [[APIError alloc] initWithReason: @"Resource not found"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 400)
             statusError = [[APIError alloc] initWithReason: @"Http bad request"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if((response.statusCode < 200) || (response.statusCode > 206)) //[200,206] = HTTP OK
             statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         if(statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, context, nil, statusError);
         }
         else
         {
             //return response to API caller
             NSString* strResult = [(HttpStringResponse*)response body];
             id result = [NSJSONSerialization
                        JSONObjectWithData: [strResult dataUsingEncoding: NSUTF8StringEncoding]
                                   options: NSJSONReadingAllowFragments
                                     error: nil];

 
             //announce completion with success
             onCompleted(YES, context, result, nil);
         }
     } failure:^(id context, NSError *error) {
 
         //announce completion with failure
         onCompleted(NO, context, nil, error);
     }];
}

/**
* Allow clients to get the list of available locations.
* @param    page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
* @param    limit    Optional parameter: Maximum number of results to return in the response
* @param    filter    Optional parameter: Allowed fields: country_iso2, region_handle, location_handle, location_name, prefix, phone_number_type, zip_code, npa, nxx, fax
* @return	Returns the void response from the API call */
- (void) getLocationsAsyncWithPage:(NSNumber*) page
                limit:(NSNumber*) limit
                filter:(NSString*) filter
                completionBlock:(CompletedGetLocations) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) [Configuration BaseUri]];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/dids/products/locations"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withQueryParameters: @{
                    @"page": (nil != page) ? page : @1,
                    @"limit": (nil != limit) ? limit : @10,
                    @"filter": (nil != filter) ? filter : [NSNull null]
                }];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"accept": @"application/json",
        @"X-Auth-Token": [Configuration XAuthToken]
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    HttpRequest* request = [[self clientInstance] get: ^(HttpRequest* request) 
    { 
        [request setQueryUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: request
     success: ^(id context, HttpResponse *response) {
         //Error handling using HTTP status codes
         NSError* statusError = nil;

         //Error handling using HTTP status codes 
         if (response.statusCode == 401)
             statusError = [[APIError alloc] initWithReason: @"You are not authenticated"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 403)
             statusError = [[APIError alloc] initWithReason: @"This action needs a valid WSSE header"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 404)
             statusError = [[APIError alloc] initWithReason: @"Resource not found"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 400)
             statusError = [[APIError alloc] initWithReason: @"Http bad request"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if((response.statusCode < 200) || (response.statusCode > 206)) //[200,206] = HTTP OK
             statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         if(statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, context, nil, statusError);
         }
         else
         {
             //return response to API caller
             NSString* strResult = [(HttpStringResponse*)response body];
             id result = [NSJSONSerialization
                        JSONObjectWithData: [strResult dataUsingEncoding: NSUTF8StringEncoding]
                                   options: NSJSONReadingAllowFragments
                                     error: nil];

 
             //announce completion with success
             onCompleted(YES, context, result, nil);
         }
     } failure:^(id context, NSError *error) {
 
         //announce completion with failure
         onCompleted(NO, context, nil, error);
     }];
}

/**
* Allow clients to get a specific location.
* @param    locationHandle    Required parameter: Location Handle
* @return	Returns the void response from the API call */
- (void) getLocationByHandleAsyncWithLocationHandle:(NSString*) locationHandle
                completionBlock:(CompletedGetLocationByHandle) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) [Configuration BaseUri]];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/dids/products/locations/{location_handle}"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withTemplateParameters: @{
                    @"location_handle": locationHandle
                }];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"accept": @"application/json",
        @"X-Auth-Token": [Configuration XAuthToken]
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    HttpRequest* request = [[self clientInstance] get: ^(HttpRequest* request) 
    { 
        [request setQueryUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: request
     success: ^(id context, HttpResponse *response) {
         //Error handling using HTTP status codes
         NSError* statusError = nil;

         //Error handling using HTTP status codes 
         if (response.statusCode == 401)
             statusError = [[APIError alloc] initWithReason: @"You are not authenticated"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 403)
             statusError = [[APIError alloc] initWithReason: @"This action needs a valid WSSE header"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 404)
             statusError = [[APIError alloc] initWithReason: @"Resource not found"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 400)
             statusError = [[APIError alloc] initWithReason: @"Http bad request"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if((response.statusCode < 200) || (response.statusCode > 206)) //[200,206] = HTTP OK
             statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         if(statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, context, nil, statusError);
         }
         else
         {
             //return response to API caller
             NSString* strResult = [(HttpStringResponse*)response body];
             id result = [NSJSONSerialization
                        JSONObjectWithData: [strResult dataUsingEncoding: NSUTF8StringEncoding]
                                   options: NSJSONReadingAllowFragments
                                     error: nil];

 
             //announce completion with success
             onCompleted(YES, context, result, nil);
         }
     } failure:^(id context, NSError *error) {
 
         //announce completion with failure
         onCompleted(NO, context, nil, error);
     }];
}

/**
* Allow clients to get the list of available trunks
* @param    page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
* @param    limit    Optional parameter: Maximum number of results to return in the response
* @return	Returns the void response from the API call */
- (void) getTrunksAsyncWithPage:(NSNumber*) page
                limit:(NSNumber*) limit
                completionBlock:(CompletedGetTrunks) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) [Configuration BaseUri]];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/dids/products/trunks"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withQueryParameters: @{
                    @"page": (nil != page) ? page : @1,
                    @"limit": (nil != limit) ? limit : @10
                }];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"accept": @"application/json",
        @"X-Auth-Token": [Configuration XAuthToken]
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    HttpRequest* request = [[self clientInstance] get: ^(HttpRequest* request) 
    { 
        [request setQueryUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: request
     success: ^(id context, HttpResponse *response) {
         //Error handling using HTTP status codes
         NSError* statusError = nil;

         //Error handling using HTTP status codes 
         if (response.statusCode == 401)
             statusError = [[APIError alloc] initWithReason: @"You are not authenticated"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 403)
             statusError = [[APIError alloc] initWithReason: @"This action needs a valid WSSE header"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 404)
             statusError = [[APIError alloc] initWithReason: @"Resource not found"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 400)
             statusError = [[APIError alloc] initWithReason: @"Http bad request"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if((response.statusCode < 200) || (response.statusCode > 206)) //[200,206] = HTTP OK
             statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         if(statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, context, nil, statusError);
         }
         else
         {
             //return response to API caller
             NSString* strResult = [(HttpStringResponse*)response body];
             id result = [NSJSONSerialization
                        JSONObjectWithData: [strResult dataUsingEncoding: NSUTF8StringEncoding]
                                   options: NSJSONReadingAllowFragments
                                     error: nil];

 
             //announce completion with success
             onCompleted(YES, context, result, nil);
         }
     } failure:^(id context, NSError *error) {
 
         //announce completion with failure
         onCompleted(NO, context, nil, error);
     }];
}

/**
* Allow clients to get a specific trunk
* @param    trunkHandle    Required parameter: Trunk Handle
* @return	Returns the void response from the API call */
- (void) getTrunkByHandleAsyncWithTrunkHandle:(NSString*) trunkHandle
                completionBlock:(CompletedGetTrunkByHandle) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) [Configuration BaseUri]];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/dids/products/trunks/{trunk_handle}"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withTemplateParameters: @{
                    @"trunk_handle": trunkHandle
                }];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"accept": @"application/json",
        @"X-Auth-Token": [Configuration XAuthToken]
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    HttpRequest* request = [[self clientInstance] get: ^(HttpRequest* request) 
    { 
        [request setQueryUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: request
     success: ^(id context, HttpResponse *response) {
         //Error handling using HTTP status codes
         NSError* statusError = nil;

         //Error handling using HTTP status codes 
         if (response.statusCode == 401)
             statusError = [[APIError alloc] initWithReason: @"You are not authenticated"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 403)
             statusError = [[APIError alloc] initWithReason: @"This action needs a valid WSSE header"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 404)
             statusError = [[APIError alloc] initWithReason: @"Resource not found"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 400)
             statusError = [[APIError alloc] initWithReason: @"Http bad request"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if((response.statusCode < 200) || (response.statusCode > 206)) //[200,206] = HTTP OK
             statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         if(statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, context, nil, statusError);
         }
         else
         {
             //return response to API caller
             NSString* strResult = [(HttpStringResponse*)response body];
             id result = [NSJSONSerialization
                        JSONObjectWithData: [strResult dataUsingEncoding: NSUTF8StringEncoding]
                                   options: NSJSONReadingAllowFragments
                                     error: nil];

 
             //announce completion with success
             onCompleted(YES, context, result, nil);
         }
     } failure:^(id context, NSError *error) {
 
         //announce completion with failure
         onCompleted(NO, context, nil, error);
     }];
}

/**
* Allow clients to get trunk zones.
* @param    page    Required parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
* @param    limit    Required parameter: Maximum number of results to return in the response.
* @return	Returns the void response from the API call */
- (void) getCountriesByTrunkAsyncWithPage:(int) page
                limit:(int) limit
                completionBlock:(CompletedGetCountriesByTrunk) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) [Configuration BaseUri]];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/dids/products/trunks/countries"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withQueryParameters: @{
                    @"page": [NSNumber numberWithInteger:page],
                    @"limit": [NSNumber numberWithInteger:limit]
                }];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"accept": @"application/json",
        @"X-Auth-Token": [Configuration XAuthToken]
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    HttpRequest* request = [[self clientInstance] get: ^(HttpRequest* request) 
    { 
        [request setQueryUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: request
     success: ^(id context, HttpResponse *response) {
         //Error handling using HTTP status codes
         NSError* statusError = nil;

         //Error handling using HTTP status codes 
         if (response.statusCode == 401)
             statusError = [[APIError alloc] initWithReason: @"You are not authenticated"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 403)
             statusError = [[APIError alloc] initWithReason: @"This action needs a valid WSSE header"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 404)
             statusError = [[APIError alloc] initWithReason: @"Resource not found"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if (response.statusCode == 400)
             statusError = [[APIError alloc] initWithReason: @"Http bad request"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         else if((response.statusCode < 200) || (response.statusCode > 206)) //[200,206] = HTTP OK
             statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                    andCode: response.statusCode
                                                    andData: response.rawBody];

         if(statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, context, nil, statusError);
         }
         else
         {
             //return response to API caller
             NSString* strResult = [(HttpStringResponse*)response body];
             id result = [NSJSONSerialization
                        JSONObjectWithData: [strResult dataUsingEncoding: NSUTF8StringEncoding]
                                   options: NSJSONReadingAllowFragments
                                     error: nil];

 
             //announce completion with success
             onCompleted(YES, context, result, nil);
         }
     } failure:^(id context, NSError *error) {
 
         //announce completion with failure
         onCompleted(NO, context, nil, error);
     }];
}


@end