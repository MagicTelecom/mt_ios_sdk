//
//  DidsProductsController.h
//  MagicTelecomAPI
//
//  This file was automatically generated by APIMATIC v2.0 on 06/23/2016
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"

@interface DidsProductsController : BaseController

/**
* Completion block definition for asynchronous call to Dids */
typedef void (^CompletedGetDids)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Allow clients to get the list of available phone_numbers
* @param    page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
* @param    limit    Optional parameter: Maximum number of results to return in the response
* @param    filter    Optional parameter: Allowed fields: country_iso2, region_handle, location_handle, location_name, phone_number, phone_number_type, zip_code
*/
- (void) getDidsAsyncWithPage:(NSNumber*) page
                limit:(NSNumber*) limit
                filter:(NSString*) filter
                completionBlock:(CompletedGetDids) onCompleted;

/**
* Completion block definition for asynchronous call to Dids By Phone Number */
typedef void (^CompletedGetDidsByPhoneNumber)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Allow clients to get a specific phone_number
* @param    phoneNumber    Required parameter: Phone Number
*/
- (void) getDidsByPhoneNumberAsyncWithPhoneNumber:(NSString*) phoneNumber
                completionBlock:(CompletedGetDidsByPhoneNumber) onCompleted;

/**
* Completion block definition for asynchronous call to Locations */
typedef void (^CompletedGetLocations)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Allow clients to get the list of available locations.
* @param    page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
* @param    limit    Optional parameter: Maximum number of results to return in the response
* @param    filter    Optional parameter: Allowed fields: country_iso2, region_handle, location_handle, location_name, prefix, phone_number_type, zip_code, npa, nxx, fax
*/
- (void) getLocationsAsyncWithPage:(NSNumber*) page
                limit:(NSNumber*) limit
                filter:(NSString*) filter
                completionBlock:(CompletedGetLocations) onCompleted;

/**
* Completion block definition for asynchronous call to Location By Handle */
typedef void (^CompletedGetLocationByHandle)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Allow clients to get a specific location.
* @param    locationHandle    Required parameter: Location Handle
*/
- (void) getLocationByHandleAsyncWithLocationHandle:(NSString*) locationHandle
                completionBlock:(CompletedGetLocationByHandle) onCompleted;

/**
* Completion block definition for asynchronous call to Trunks */
typedef void (^CompletedGetTrunks)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Allow clients to get the list of available trunks
* @param    page    Optional parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result
* @param    limit    Optional parameter: Maximum number of results to return in the response
*/
- (void) getTrunksAsyncWithPage:(NSNumber*) page
                limit:(NSNumber*) limit
                completionBlock:(CompletedGetTrunks) onCompleted;

/**
* Completion block definition for asynchronous call to Trunk By Handle */
typedef void (^CompletedGetTrunkByHandle)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Allow clients to get a specific trunk
* @param    trunkHandle    Required parameter: Trunk Handle
*/
- (void) getTrunkByHandleAsyncWithTrunkHandle:(NSString*) trunkHandle
                completionBlock:(CompletedGetTrunkByHandle) onCompleted;

/**
* Completion block definition for asynchronous call to Countries By Trunk */
typedef void (^CompletedGetCountriesByTrunk)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Allow clients to get trunk zones.
* @param    page    Required parameter: Zero based offset index for the results. e.g. 0 would start at the first result and 10 would start at the eleventh result.
* @param    limit    Required parameter: Maximum number of results to return in the response.
*/
- (void) getCountriesByTrunkAsyncWithPage:(int) page
                limit:(int) limit
                completionBlock:(CompletedGetCountriesByTrunk) onCompleted;

@end